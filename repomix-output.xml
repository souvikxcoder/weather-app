This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    globals.css
    layout.tsx
  components/
    WeatherListItem.module.css
    WeatherListItem.tsx
  pages/
    api/
      weather.ts
    index.tsx
  styles/
    Home.module.css
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/WeatherListItem.module.css">
.listItem {
    display: grid;
    grid-template-columns: 80px 60px 100px 1fr 80px auto 40px;
    padding: 16px;
    border-bottom: 1px solid #e0e0e0;
    background-color: #ffffff;
    transition: background-color 0.2s ease;
    align-items: center;
    cursor: pointer;
}

.listItem:hover {
    background-color: #f8f8f8;
}

.listItem.expanded {
    background-color: #f0f8ff;
    border-bottom: none;
}

/* Day column */
.dayColumn {
    grid-column: 1;
}

.dayTitle {
    font-weight: bold;
    font-size: 1.2rem;
    text-transform: uppercase;
}

.dayDate {
    color: #666;
    font-size: 0.9rem;
}

/* Icon column */
.iconColumn {
    grid-column: 2;
    font-size: 1.8rem;
    text-align: center;
}

/* Temperature column */
.tempColumn {
    grid-column: 3;
    display: flex;
    align-items: center;
}

.highTemp {
    font-size: 1.8rem;
    font-weight: bold;
    margin-right: 8px;
}

.lowTemp {
    font-size: 1.4rem;
    color: #777;
}

/* Description column */
.descColumn {
    grid-column: 4;
    padding: 0 16px;
}

.mainDescription {
    font-weight: 500;
    font-size: 1.1rem;
}

.nightInfo {
    display: flex;
    align-items: center;
    color: #666;
    margin-top: 4px;
    font-size: 0.9rem;
}

.moonIcon {
    margin-right: 6px;
}

/* Precipitation column */
.precipColumn {
    grid-column: 5;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    color: #0066cc;
    font-size: 1.2rem;
    font-weight: 500;
}

.dropIcon {
    margin-right: 4px;
    color: #0066cc;
}

.precipValue {
    color: #0066cc;
}

/* Recommendation column */
.recColumn {
    grid-column: 6;
    display: flex;
    flex-direction: column;
    gap: 4px;
    justify-content: center;
    padding-left: 20px;
    min-width: 220px;
}

.recommendationItem {
    background: #e0f0ff;
    color: #0066cc;
    padding: 6px 12px;
    border-radius: 16px;
    font-size: 0.875rem;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

/* Expand toggle */
.expandToggle {
    grid-column: 7;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #666;
    font-size: 14px;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s ease;
}

.expandToggle:hover {
    background-color: #e0e0e0;
}

/* Detailed expanded view */
.detailedView {
    background-color: #f0f8ff;
    border-bottom: 1px solid #e0e0e0;
    padding: 16px;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.detailsGrid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
}

.detailCard {
    background: white;
    border-radius: 8px;
    padding: 16px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.detailCard h3 {
    margin-top: 0;
    margin-bottom: 12px;
    color: #0066cc;
    font-size: 1.1rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 8px;
}

.detailItem {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
}

.detailItem span:first-child {
    color: #555;
    font-weight: 500;
}

.detailItem span:last-child {
    font-weight: 600;
}

/* Responsive styles */
@media (max-width: 900px) {
    .listItem {
        grid-template-columns: 80px 60px 100px 1fr 40px;
        grid-template-rows: auto auto;
    }

    .dayColumn {
        grid-column: 1;
        grid-row: 1;
    }

    .iconColumn {
        grid-column: 2;
        grid-row: 1;
    }

    .tempColumn {
        grid-column: 3;
        grid-row: 1;
    }

    .descColumn {
        grid-column: 4;
        grid-row: 1;
    }

    .expandToggle {
        grid-column: 5;
        grid-row: 1;
    }

    .precipColumn {
        grid-column: 1;
        grid-row: 2;
        justify-content: flex-start;
        margin-top: 12px;
    }

    .recColumn {
        grid-column: 2 / span 3;
        grid-row: 2;
        padding-left: 0;
        margin-top: 12px;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .detailsGrid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
}

@media (max-width: 600px) {
    .listItem {
        grid-template-columns: 1fr 1fr 40px;
        grid-template-rows: auto auto auto auto;
        gap: 8px;
    }

    .dayColumn {
        grid-column: 1;
        grid-row: 1;
    }

    .iconColumn {
        grid-column: 2;
        grid-row: 1;
        text-align: right;
    }

    .expandToggle {
        grid-column: 3;
        grid-row: 1;
    }

    .tempColumn {
        grid-column: 1;
        grid-row: 2;
    }

    .descColumn {
        grid-column: 1 / span 2;
        grid-row: 3;
        padding: 0;
    }

    .precipColumn {
        grid-column: 2;
        grid-row: 2;
        justify-content: flex-end;
        margin-top: 0;
    }

    .recColumn {
        grid-column: 1 / span 2;
        grid-row: 4;
        padding: 0;
        margin-top: 8px;
    }

    .detailsGrid {
        grid-template-columns: 1fr;
    }
}
</file>

<file path="src/components/WeatherListItem.tsx">
import { useState } from "react";
import styles from "./WeatherListItem.module.css";

type WeatherListItemProps = {
  date: string;
  dayOfWeek: string;
  high: number;
  low: number;
  description: string;
  nightDescription?: string;
  precipitation: number;
  recommendations: string[];
  rawData?: any;
};

export default function WeatherListItem({
  date,
  dayOfWeek,
  high,
  low,
  description,
  nightDescription,
  precipitation,
  recommendations,
  rawData,
}: WeatherListItemProps) {
  const [expanded, setExpanded] = useState(false);

  const formattedDate = new Date(date).toLocaleDateString("en-US", {
    month: "numeric",
    day: "numeric",
  });

  // Weather icon based on description
  const getWeatherIcon = () => {
    const desc = description.toLowerCase();
    if (desc.includes("clear") || desc.includes("sunny")) {
      return "☀️";
    } else if (desc.includes("cloud")) {
      return "⛅";
    } else if (desc.includes("rain") || desc.includes("drizzle")) {
      return "🌧️";
    } else if (desc.includes("thunderstorm")) {
      return "⛈️";
    } else if (desc.includes("snow")) {
      return "❄️";
    } else if (desc.includes("mist") || desc.includes("fog")) {
      return "🌫️";
    } else {
      return "🌤️";
    }
  };

  const handleToggleExpand = (e: React.MouseEvent) => {
    e.stopPropagation();
    setExpanded(!expanded);
  };

  return (
    <>
      <div className={`${styles.listItem} ${expanded ? styles.expanded : ""}`}>
        {/* Day info column */}
        <div className={styles.dayColumn}>
          <div className={styles.dayTitle}>{dayOfWeek}</div>
          <div className={styles.dayDate}>{formattedDate}</div>
        </div>

        {/* Weather icon column */}
        <div className={styles.iconColumn}>{getWeatherIcon()}</div>

        {/* Temperature column */}
        <div className={styles.tempColumn}>
          <span className={styles.highTemp}>{Math.round(high)}°</span>
          <span className={styles.lowTemp}>{Math.round(low)}°</span>
        </div>

        {/* Description column */}
        <div className={styles.descColumn}>
          <div className={styles.mainDescription}>
            {description.charAt(0).toUpperCase() + description.slice(1)}
          </div>
          <div className={styles.nightInfo}>
            <span className={styles.moonIcon}>🌙</span>
            <span>{nightDescription || "Night: Clear"}</span>
          </div>
        </div>

        {/* Precipitation column */}
        <div className={styles.precipColumn}>
          <span className={styles.dropIcon}>💧</span>
          <span className={styles.precipValue}>{precipitation}%</span>
        </div>

        {/* Recommendations column */}
        <div className={styles.recColumn}>
          {recommendations.map((rec, index) => (
            <div key={index} className={styles.recommendationItem}>
              {rec}
            </div>
          ))}
        </div>

        <div className={styles.expandToggle} onClick={handleToggleExpand}>
          {expanded ? "▲" : "▼"}
        </div>
      </div>

      {/* Detailed expanded view */}
      {expanded && (
        <div className={styles.detailedView}>
          <div className={styles.detailsGrid}>
            <div className={styles.detailCard}>
              <h3>Temperatures</h3>
              <div className={styles.detailItem}>
                <span>Feels Like:</span>
                <span>
                  {rawData?.main?.feels_like !== undefined
                    ? `${Math.round(rawData.main.feels_like)}°C`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Min Temp:</span>
                <span>
                  {rawData?.main?.temp_min !== undefined
                    ? `${Math.round(rawData.main.temp_min)}°C`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Max Temp:</span>
                <span>
                  {rawData?.main?.temp_max !== undefined
                    ? `${Math.round(rawData.main.temp_max)}°C`
                    : "N/A"}
                </span>
              </div>
            </div>

            <div className={styles.detailCard}>
              <h3>Wind</h3>
              <div className={styles.detailItem}>
                <span>Speed:</span>
                <span>
                  {rawData?.wind?.speed !== undefined
                    ? `${rawData.wind.speed} m/s`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Direction:</span>
                <span>
                  {rawData?.wind?.deg !== undefined
                    ? `${rawData.wind.deg}°`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Gust:</span>
                <span>
                  {rawData?.wind?.gust !== undefined
                    ? `${rawData.wind.gust} m/s`
                    : "N/A"}
                </span>
              </div>
            </div>

            <div className={styles.detailCard}>
              <h3>Pressure & Humidity</h3>
              <div className={styles.detailItem}>
                <span>Pressure:</span>
                <span>
                  {rawData?.main?.pressure !== undefined
                    ? `${rawData.main.pressure} hPa`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Sea Level:</span>
                <span>
                  {rawData?.main?.sea_level !== undefined
                    ? `${rawData.main.sea_level} hPa`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Humidity:</span>
                <span>
                  {rawData?.main?.humidity !== undefined
                    ? `${rawData.main.humidity}%`
                    : "N/A"}
                </span>
              </div>
            </div>

            <div className={styles.detailCard}>
              <h3>Visibility & Clouds</h3>
              <div className={styles.detailItem}>
                <span>Visibility:</span>
                <span>
                  {rawData?.visibility
                    ? `${rawData.visibility / 1000} km`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Cloud Coverage:</span>
                <span>
                  {rawData?.clouds?.all !== undefined
                    ? `${rawData.clouds.all}%`
                    : "N/A"}
                </span>
              </div>
              <div className={styles.detailItem}>
                <span>Precipitation:</span>
                <span>
                  {rawData?.pop !== undefined
                    ? `${Math.round(rawData.pop * 100)}%`
                    : "N/A"}
                </span>
              </div>
            </div>

            {rawData?.sys && (
              <div className={styles.detailCard}>
                <h3>Additional Info</h3>
                <div className={styles.detailItem}>
                  <span>Weather Type:</span>
                  <span>{rawData?.weather?.[0]?.main || "N/A"}</span>
                </div>
                <div className={styles.detailItem}>
                  <span>Weather ID:</span>
                  <span>{rawData?.weather?.[0]?.id || "N/A"}</span>
                </div>
                <div className={styles.detailItem}>
                  <span>Time of Day:</span>
                  <span>{rawData?.sys?.pod === "d" ? "Day" : "Night"}</span>
                </div>
              </div>
            )}

            {rawData?.dt && (
              <div className={styles.detailCard}>
                <h3>Time Information</h3>
                <div className={styles.detailItem}>
                  <span>Full Date:</span>
                  <span>{new Date(rawData.dt * 1000).toLocaleString()}</span>
                </div>
                <div className={styles.detailItem}>
                  <span>Data From:</span>
                  <span>
                    {rawData?.dt_txt ||
                      new Date(rawData.dt * 1000).toLocaleString()}
                  </span>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="src/pages/api/weather.ts">
import type { NextApiRequest, NextApiResponse } from "next";
import axios from "axios";

// Day of week mapping
const getDayOfWeek = (date: Date): string => {
  const days = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
  return days[date.getDay()];
};

// Mock data for offline mode or API failures
const mockWeatherData = (city: string) => {
  const today = new Date();
  const result = [];

  for (let i = 0; i < 5; i++) {
    const date = new Date();
    date.setDate(today.getDate() + i);

    // Generate some realistic mock data
    const high = 25 + Math.floor(Math.random() * 15);
    const low = high - 5 - Math.floor(Math.random() * 5);
    const descriptions = [
      "Clear",
      "Partly cloudy",
      "Mostly sunny",
      "Cloudy",
      "Light rain",
    ];
    const description =
      descriptions[Math.floor(Math.random() * descriptions.length)];
    const nightDescriptions = [
      "Clear",
      "Partly cloudy",
      "Cloudy",
      "Light rain",
    ];
    const nightDescription =
      nightDescriptions[Math.floor(Math.random() * nightDescriptions.length)];
    const precipitation = Math.floor(Math.random() * 30);

    // Generate recommendations
    const recommendations = [];
    if (description.includes("rain")) recommendations.push("Carry an umbrella");
    if (high > 40) recommendations.push("Use sunscreen lotion");
    if (Math.random() > 0.7) recommendations.push("It's too windy, watch out!");
    if (Math.random() > 0.9)
      recommendations.push("Don't step out! A Storm is brewing!");

    // Generate mock raw data
    const mockRawData = {
      dt: Math.floor(date.getTime() / 1000),
      main: {
        temp: high,
        feels_like: high - 2,
        temp_min: low,
        temp_max: high,
        pressure: 1005 + Math.floor(Math.random() * 10),
        sea_level: 1005 + Math.floor(Math.random() * 10),
        grnd_level: 909 + Math.floor(Math.random() * 10),
        humidity: 20 + Math.floor(Math.random() * 30),
      },
      weather: [
        {
          id: 800 + Math.floor(Math.random() * 100),
          main: description.includes("cloud")
            ? "Clouds"
            : description.includes("rain")
            ? "Rain"
            : "Clear",
          description: description.toLowerCase(),
          icon: "04d",
        },
      ],
      clouds: {
        all: Math.floor(Math.random() * 100),
      },
      wind: {
        speed: 3 + Math.random() * 10,
        deg: Math.floor(Math.random() * 360),
        gust: 4 + Math.random() * 10,
      },
      visibility: 10000,
      pop: precipitation / 100,
      sys: {
        pod: "d",
        country: "US",
        sunrise: Math.floor(date.getTime() / 1000) - 25000,
        sunset: Math.floor(date.getTime() / 1000) + 25000,
      },
      dt_txt: date.toISOString(),
      name: city,
    };

    result.push({
      date: date.toISOString(),
      dayOfWeek: getDayOfWeek(date),
      high,
      low,
      description,
      nightDescription,
      precipitation,
      recommendations,
      rawData: mockRawData, // Include the raw data
    });
  }

  return result;
};

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  const { city } = req.query;
  const offlineMode = req.query.offline === "true";

  if (!city) {
    return res.status(400).json({ error: "City is required" });
  }

  // If in offline mode, return mock data
  if (offlineMode) {
    return res.status(200).json(mockWeatherData(city as string));
  }

  const apiKey = process.env.OPENWEATHER_API_KEY || "REPLACE_WITH_YOUR_API_KEY";
  const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&cnt=24&units=metric`;

  try {
    const response = await axios.get(apiUrl);

    // Group forecast by day (taking the max temp for day and min for night)
    const dailyForecasts = new Map();

    // Extract city info first
    const cityInfo = response.data.city;

    response.data.list.forEach((item: any) => {
      const date = new Date(item.dt * 1000);
      const day = date.toISOString().split("T")[0];
      const temp = item.main.temp;
      const isDay = date.getHours() >= 6 && date.getHours() <= 18;

      // Store the first forecast for each day to use as raw data
      if (!dailyForecasts.has(day)) {
        const rawData = {
          ...item,
          name: cityInfo.name,
          coord: cityInfo.coord,
          sys: {
            ...item.sys,
            country: cityInfo.country,
            sunrise: cityInfo.sunrise,
            sunset: cityInfo.sunset,
          },
        };

        dailyForecasts.set(day, {
          date: day,
          dayOfWeek: getDayOfWeek(date),
          high: temp,
          low: temp,
          description: item.weather[0].description,
          nightDescription: "",
          precipitation: Math.round(item.pop * 100) || 0,
          recommendations: [],
          rawData,
        });
      } else {
        const forecast = dailyForecasts.get(day);

        // Update high/low temps
        if (temp > forecast.high) forecast.high = temp;
        if (temp < forecast.low) forecast.low = temp;

        // Update descriptions based on time of day
        if (!isDay && !forecast.nightDescription) {
          forecast.nightDescription = item.weather[0].description;
        }

        // Update precipitation to the highest probability
        const pop = Math.round(item.pop * 100) || 0;
        if (pop > forecast.precipitation) {
          forecast.precipitation = pop;
        }
      }
    });

    // Process recommendations and prepare final data
    const weatherData = Array.from(dailyForecasts.values())
      .slice(0, 5)
      .map((day) => {
        const recommendations = [];

        if (day.description.includes("rain") || day.precipitation > 50) {
          recommendations.push("Carry an umbrella");
        }

        if (day.high > 30) {
          recommendations.push("Use sunscreen lotion");
        }

        if (day.rawData.wind.speed > 5) {
          recommendations.push("It's too windy, watch out!");
        }

        if (day.description.includes("thunderstorm")) {
          recommendations.push("Don't step out! A Storm is brewing!");
        }

        return {
          date: day.date,
          dayOfWeek: day.dayOfWeek,
          high: day.high,
          low: day.low,
          description: day.description || "No data",
          nightDescription: day.nightDescription || "Clear",
          precipitation: day.precipitation,
          recommendations,
          rawData: day.rawData,
        };
      });

    res.status(200).json(weatherData);
  } catch (error) {
    console.error("API Error:", error);
    // Fallback to mock data on error
    res.status(200).json(mockWeatherData(city as string));
  }
};

export default handler;
</file>

<file path="src/pages/index.tsx">
import { useState } from "react";
import axios from "axios";
import WeatherListItem from "../components/WeatherListItem";
import styles from "../styles/Home.module.css";

type WeatherData = {
  date: string;
  dayOfWeek: string;
  high: number;
  low: number;
  description: string;
  nightDescription?: string;
  precipitation: number;
  recommendations: string[];
  rawData?: any;
};

export default function Home() {
  const [city, setCity] = useState("");
  const [weatherData, setWeatherData] = useState<WeatherData[]>([]);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [offlineMode, setOfflineMode] = useState(false);

  const fetchWeather = async () => {
    if (!city.trim()) {
      setError("Please enter a city name");
      return;
    }

    setIsLoading(true);
    try {
      const response = await axios.get(
        `/api/weather?city=${encodeURIComponent(city)}&offline=${offlineMode}`
      );
      setWeatherData(response.data);
      setError("");
    } catch (err: any) {
      setError(err.response?.data?.error || "Something went wrong");
      setWeatherData([]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Weather Forecast App</h1>

      <div className={styles.controls}>
        <input
          type="text"
          placeholder="Enter city name"
          value={city}
          onChange={(e) => setCity(e.target.value)}
          className={styles.input}
          onKeyPress={(e) => e.key === "Enter" && fetchWeather()}
        />
        <button
          onClick={fetchWeather}
          disabled={isLoading}
          className={styles.button}
        >
          {isLoading ? "Loading..." : "Get Weather"}
        </button>

        <label className={styles.toggleContainer}>
          <input
            type="checkbox"
            checked={offlineMode}
            onChange={() => setOfflineMode(!offlineMode)}
          />
          <span className={styles.toggleLabel}>Offline Mode</span>
        </label>
      </div>

      {error && <p className={styles.error}>{error}</p>}

      {weatherData.length > 0 && (
        <div className={styles.weatherListContainer}>
          <h2 className={styles.forecastTitle}>
            {weatherData.length}-Day Weather Forecast for {city}
          </h2>
          <div className={styles.weatherList}>
            {weatherData.map((day, index) => (
              <WeatherListItem key={index} {...day} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/styles/Home.module.css">
/* Home.module.css */
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 24px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.title {
    color: #333;
    margin-bottom: 24px;
    text-align: center;
}

.controls {
    display: flex;
    gap: 12px;
    margin-bottom: 24px;
    flex-wrap: wrap;
}

.input {
    flex: 1;
    min-width: 200px;
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
}

.button {
    background-color: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px 16px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.2s;
}

.button:hover {
    background-color: #0055aa;
}

.button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.toggleContainer {
    display: flex;
    align-items: center;
    cursor: pointer;
    user-select: none;
}

.toggleLabel {
    margin-left: 8px;
    color: #555;
}

.error {
    color: #d32f2f;
    background-color: #ffebee;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
}

.weatherListContainer {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.forecastTitle {
    padding: 16px;
    margin: 0;
    background-color: #f5f5f5;
    border-bottom: 1px solid #e0e0e0;
    font-size: 1.4rem;
}

.weatherList {
    max-height: 700px;
    overflow-y: auto;
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "weather-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "next": "15.1.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.5",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
